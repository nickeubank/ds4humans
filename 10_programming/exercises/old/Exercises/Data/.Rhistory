result
names(result) <- c("name", "group_assignment")
result
library(ggmap)
library(ggmap)
?"ggmap"
?geocode
library(knitr)
#library(rmdformats)
## libraries needed for R code examples
library(sp)
library(raster)
library(rgdal)
crs.geo <- CRS("+init=EPSG:32633")  # UTM 33N
?sp
rm(list=ls())
library(sp)
crs.geo <- CRS("+init=EPSG:32633")  # UTM 33N
?sp
install.packages('sp')
install.packages('sp')
library(sp)
crs.geo <- CRS("+init=EPSG:32633")  # UTM 33N
?sp
uninstall.packages('sp')
remove.packages("sp")
install.packages('sp')
install.packages("sp")
library(sp)
crs.geo <- CRS("+init=EPSG:32633")  # UTM 33N
?sp
session.info()
Rsession.info()
sessionInfo()
crs.geo <- CRS("+init=epsg:32633")  # looks up UTM 33N
library("sp")
crs.geo <- CRS("+init=epsg:32633")  # looks up UTM 33N
crs.geo <- CRS("+init=EPSG:32633")  # looks up UTM 33N
library(sp)
library(raster)
library(rgdal)
df <- data.frame(attr1 = c('a','b','z','d','e','q','w','r','z'), attr2 = c(101:109))
df
toy.coordinates <- rbind(c(1.5, 2.00),
c(2.5, 2.00),
c(0.5, 0.50),
c(1.0, 0.25),
c(1.5, 0.00),
c(2.0, 0.00),
c(2.5, 0.00),
c(3.0, 0.25),
c(3.5, 0.50))
toy.coordinates
my.first.points <- SpatialPoints(toy.coordinates) # ..converted into a spatial object
plot(my.first.points)
my.first.spdf <- SpatialPointsDataFrame(my.first.points, df)
summary(my.first.spdf)
data(my.first.spdf)
my.first.spdf <- SpatialPointsDataFrame(my.first.points, df)
summary(my.first.spdf)
data(my.first.spdf)
library(sp)
library(raster)
library(rgdal)
library(sp)
toy.coordinates <- rbind(c(1.5, 2.00),
c(2.5, 2.00),
c(0.5, 0.50),
c(1.0, 0.25),
c(1.5, 0.00),
c(2.0, 0.00),
c(2.5, 0.00),
c(3.0, 0.25),
c(3.5, 0.50))
toy.coordinates
my.first.points <- SpatialPoints(toy.coordinates) # ..converted into a spatial object
plot(my.first.points)
summary(my.first.points)
coordinates(my.first.points)
summary(my.first.points)
is.projected(my.first.points) # see if a projection is defined.
# Returns `NA` if no geographic coordinate system or projection; returns FALSE if has geographic coordinate system but no projection.
crs.geo <- CRS("+init=EPSG:32633")  # UTM 33N
proj4string(my.first.points) <- crs.geo  # define projection system of our data
is.projected(my.first.points)
summary(my.first.points)
crs.geo <- CRS("+init=EPSG:32633")  # looks up UTM 33N
crs.geo # prints all parameters
df <- data.frame(attr1 = c('a','b','z','d','e','q','w','r','z'), attr2 = c(101:109))
df
my.first.spdf <- SpatialPointsDataFrame(my.first.points, df)
summary(my.first.spdf)
as.data.frame(my.first.points)
a = repl(1, 10000000)
a = rep(1, 10000000)
a = rep(1, 100000000)
a = rep(1, 1000000000)
b = 'test'
library(sp)
library(rgdal)
a = readOGR('/users/nick/desktop/vzestados', 'venezuela_estados')
a
plot(a)
library(rgdal)
Sys.sleep(45)
library(sp)
?over
sumdigits = function(){}
sum_digits <- function () {
total = 0
for (i in 1:1000000){
total = total + i
}
return total
}
sum_digits <- function () {
total = 0
for (i in 1:1000000){
total = total + i
}
return(total)
}
system.time(sum_digits())
system.time(sum_digits())
system.time?
?system.time
?system.time
library(dplyr)
?join
library(data.table)
?join.tbl_df
?join
x = y
for(x in 1:10) {
print(x)
}
x = 7
for( x in 1:7) {
print(x)
}
?df = data.frame
df = data.frame?
()
?data.frame
df = data.frame(1:3, ["a", "b", "c"], names = ["a", "b"])
df = data.frame(1:3, c("a", "b", "c"), names = ("a", "b"))
df = data.frame(1:3, c("a", "b", "c"))
df
df = data.frame("a"=1:3, "b"=c("a", "b", "c"))
df
df[df$a > 1]
df[df$a > 1,]
x = 7
x
print(x)
x[1]
x[2]
x[3]
class(x)
type(x)
5 * 5
5 * 3489308098423
X <- 42
X
X <- 5
X
5 + 6
5 * 6
5 / 6
x = 42
y = 7
x * y
class(x)
x = "my dog's name is Trillian"
x
x = "10"
x * 2
class(x)
TRUE
FALSE
x = FALSE
x
class(x)
x <- 7
x <- "this is a character"
x <- 8743
x <- "this is a character"
class(x)
my_dog = "Trillian"
as.numeric(my_dog)
as.numeric("7")
as.numeric("woofer")
x = 7
x = c(2, 3, 7, 172)
x
x = c(2, 3, 7, 172)
x = c("nick", "adriane", "peter", "allison")
class(x)
x = c(2, 3, 7, 172)
class(x)
x
x * 2
x + x
x+x
x
length(x)
x[1]
x[4]
x[5]
0:1000
mean(0:1000)
x = 1:10
first_ten = 1:10
first_five = 1:15
first_ten + first_five
first_five = 1:5
first_ten + first_five
first_four = 1:4
first_ten + first_four
first_ten + 1
my_favorite_numbers = c(3, 7, 42, 47)
my_favorite_numbers[1]
my_favorite_numbers[c(2, 4)]
lots_of_third_item = c(3, 3, 3, 3, 3, 3, 4)
my_favorite_numbers[lots_of_third_item]
lots_of_third_item = c(4, 4, 3, 3, 3, 3, 3, 3)
my_favorite_numbers[lots_of_third_item]
my_favorite_numbers[c(1,3,5)]
my_favorite_numbers[c(1, 3, 4)]
most_favorite = my_favorite_numbers[c(1, 3, 4)]
most_favorite
most_favorite = my_favorite_numbers[c(TRUE, TRUE, FALSE, FALSE)]
my_favorite_numbers[c(TRUE, TRUE, FALSE, FALSE)]
my_favorite_numbers[c(TRUE, TRUE, FALSE, TRUE)]
my_favorite_numbers[c(TRUE, FALSE)]
my_favorite_numbers[c(TRUE, FALSE, TRUE)]
my_favorite_numbers
my_favorite_numbers[c(TRUE, FALSE)]
my_favorite_numbers[c(TRUE, FALSE, TRUE)]
my_favorite_numbers[my_favorite_numbers > 10]
big_numbers = my_favorite_numbers > 10
big_numbers
my_favorite_numbers[big_numbers]
my_favorite_numbers[my_favorite_numbers > mean(my_favorite_numbers)]
avg = mean(my_favorite_numbers)
avg
big = my_favorite_numbers > avg
big
my_favorite_numbers[big]
big = my_favorite_numbers > mean(my_favorite_numbers)
my_favorite_numbers[my_favorite_numbers > mean(my_favorite_numbers[1:3])]
df = data.frame(x = c(1,2), y=c("a", "b"))
df[[2]]
df[2]
df[c("y")]
df[,"y"]
class(df[2])
class(df["y"])
class(df[["y"]])
df
df = data.frame(x = c(1,2,3), y=c("a", "b", "c"))
df
df[c(TRUE, FALSE)]
install.packages("ggplot2")
library(ggplot2)
data = read.csv("/users/nick/dropbox/joint_projects/poli_sci_boot_camp/Computational_methods/exercises/data/anscombe.csv")
data
data = read.csv("/users/nick/dropbox/joint_projects/poli_sci_boot_camp/Computational_methods/exercises/data/datasaurus.tsv",
sep="\t")
data
for (i in 1:13){}
for (i in 1:13){
}
lm(example1_y ~ example1_x)
lm(data["example1_y"] ~ data["example1_x"])
?lm
lm(example1_y ~ example1_x, data)
formula = paste("example", i, "_y ~ example", i, "_x")
for (i in 1:13){
formula = paste("example", i, "_y ~ example", i, "_x")
lm(formula, data)
}
formula = paste("example", i, "_y ~ example", i, "_x")
formula
formula = paste0("example", i, "_y ~ example", i, "_x")
formula
lm(formula, data)
for (i in 1:13){
formula = paste0("example", i, "_y ~ example", i, "_x")
lm(formula, data)
}
for (i in 1:13){
formula = paste0("example", i, "_y ~ example", i, "_x")
print(lm(formula, data))
}
corr(data$example1_x, data$example1_y)
cor(data$example1_x, data$example1_y)
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", "i", "_y")
cor(data[first_col], data[second_col])}
}
cor(data$example1_x, data$example1_y)
"example" + i + "_y"
i = "1"
"example" + i + "_y"
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", "i", "_y")
cor(data[first_col], data[second_col])
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
cor(data[first_col], data[second_col])
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
print(cor(data[first_col], data[second_col]))
}
pop <- runif(n = 3144, min = 0, max = 1)
pop
ggplot(data + aes(example1_x, example1_y)) + geom_points()
ggplot(data + aes(example1_x, example1_y))
ggplot(data + aes(example1_x example1_y)) + geom_points()
data
names(data)
ggplot(data, aes(example1_x, example1_y)) + geom_points()
ggplot(data, aes(example1_x, example1_y)) + geom_point()
ggsave("/users/nick/desktop/example_1.pdf")
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes(first_col, second_col)) + geom_points()
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes(first_col, second_col)) + geom_point() + title(paste("Example",i))
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes(first_col, second_col)) + geom_point() + labs(title(paste("Example",i)))
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes(first_col, second_col)) + geom_point() + ggtitle(paste("Example",i))
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes_string(first_col, second_col)) + geom_point() + ggtitle(paste("Example",i))
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes_string(first_col, second_col)) + geom_point() + ggtitle(paste("Example",i))
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
for (i in 1:13){
first_col = paste0("example", i, "_x")
second_col = paste0("example", i, "_y")
ggplot(data, aes_string(first_col, second_col)) + geom_point() + ggtitle(paste("Example",i)) + coord_fixed(1)
path = paste0("/users/nick/desktop/example_", i, ".pdf")
ggsave(path)
}
setwd("/users/nick/dropbox/joint_projects/poli_sci_boot_camp/computational_methods/exercises/data")
setwd("/users/nick/dropbox/joint_projects/poli_sci_boot_camp/computational_methods/exercises/data")
library(foreign)
library(dplyr)
inequality = read.dta("inequality.dta")
taxation = read.csv("STC_Historical_taxes.csv")
names(taxation)
populations = read.csv("state_populations.csv")
fips_codes = read.table("State_FIPS.txt", sep="\t")
head(fips_codes)
fips_codes = read.table("State_FIPS.txt", sep="\t", header=TRUE)
head(fips_codes)
fips_codes = read.csv("State_FIPS.txt", sep="\t")
head(fips_codes)
head(inequality)
head(populations)
head(taxation)
table(inequality$year)
table(taxation$X.year)
head(taxation)
table(taxation$year)
filter(taxation, year == 1940)
table(inequality$state)
length(table(inequality$state))
inequality = inequality[inequality$year == 2010,] # OR inequality = filter(inequality, year == 2010)
inequality = inequality[c("year", "state", "gini", "top10", "top1")] #OR inequality = select(inequality, year, state, gini, top10, top1)
inequality = filter(inequality, state != "District of Columbia" & state != "United States")
taxation = select(taxation, year, state, Total.Taxes, Total.Income.Taxes, name)
taxation = filter(taxation, year == 2010) # OR taxation = taxation[taxation$year == 2010,]
taxation = rename(taxation, state_fips_code=state)
taxation = filter(taxation, name != "US STATE GOVTS")
# Get relevant observations and variables from populations
populations = select(populations, NAME, CENSUS2010POP)
populations = rename(populations, state=NAME, population_2010=CENSUS2010POP)
# Get rid of non-states
populations = filter(populations, !state %in% c("United States",
"District of Columbia",
"Puerto Rico",
"Northeast Region",
"Midwest Region",
"South Region",
"West Region"))
not_actual_states = c("United States",
"District of Columbia",
"Puerto Rico",
"Northeast Region",
"Midwest Region",
"South Region",
"West Region")
populations = filter(populations, !state %in% not_actual_states)
fips_codes = select(fips_codes, State.FIPS, Name)
# Don't want weird region lines and stuff
fips_codes = filter(fips_codes, State.FIPS != 0)
fips_codes = filter(fips_codes, State.FIPS != 11) # this is DC
nrow(taxation)
nrow(fips_codes)
taxation_w_names = merge(taxation, fips_codes,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
nrow(taxation_w_names)
head(fips_codes)
files_codes[fips_codes$Name == "Rhode Island", "Name"] = "RhodeIsland"
fips_codes[fips_codes$Name == "Rhode Island", "Name"] = "RhodeIsland"
fips_codes$Name = as.character(fips_codes$Name)
fips_codes[fips_codes$Name == "Rhode Island", "Name"] = "RhodeIsland"
head(fips_codes)
fips_codes = read.csv("State_FIPS.txt", sep="\t")
# Only need names and fips codes
fips_codes = select(fips_codes, State.FIPS, Name)
# Don't want weird region lines and stuff
fips_codes = filter(fips_codes, State.FIPS != 0)
fips_codes = filter(fips_codes, State.FIPS != 11) # this is DC
fips_codes_w_problem = fips_codes
fips_codes_w_problem$Name = as.character(fips_codes_w_problem$Name)
fips_codes_w_problem[fips_codes_w_problem$Name == "Rhode Island", "Name"] = "RhodeIsland"
head(fips_codes_w_problem)
taxation_w_names = merge(taxation, fips_codes_w_problem,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
nrow(taxation_w_names)
fips_codes_w_problem = fips_codes
fips_codes_w_problem[fips_codes_w_problem$State.FIPS == 9, "State.FIPS"] = -1
head(fips_codes_w_problem)
taxation_w_names = merge(taxation, fips_codes_w_problem,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
nrow(taxation_w_names)
taxation_w_names[is.na(taxation_w_names$Name),]
stopifnot( nrow(taxation_w_names)==50 )
taxation_w_names = merge(taxation, fips_codes,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
nrow(taxation_w_names)
stopifnot( nrow(taxation_w_names)==50 )
class(fips_codes$Name)
fips_codes[fips_codes$Name == "California",]
fips_codes[fips_codes$Name == "California", "Name"] = "joe"
fips_codes[fips_codes$State.FIPS == 6, ]
fips_codes$Name = as.character(fips_codes$Name)
class(fips_codes$Name)
fips_codes[fips_codes$Name == "Colorado", "Name"] = "joe"
NA == NA
taxation_w_names = merge(taxation, fips_codes_w_problem,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
taxation_w_names[taxation_w_names$Name == NA,]
taxation_w_names[is.na(taxation_w_names$Name),]
taxation_w_names = merge(taxation, fips_codes,
by.x="state_fips_code",
by.y="State.FIPS",
all=TRUE) # Note you have til fill in right values here!
nrow(taxation_w_names)
stopifnot( nrow(taxation_w_names)==50 )
ineq_and_taxation = merge(taxation_w_names, inequality,
by.x="Name",
by.y="state",
all=TRUE)
stopifnot(nrow(ineq_and_taxation) == 50)
# Now we can merge that data with populations!
nrow(ineq_and_taxation)
full_data = merge(ineq_and_taxation, populations,
by.x="Name",
by.y="state",
all=TRUE)
stopifnot(nrow(full_data) == 50)
nrow(full_data)
full_data
